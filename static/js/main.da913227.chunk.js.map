{"version":3,"sources":["services/dump-service.ts","store/dump-store.ts","store/store.ts","services/search-service.ts","components/header/action-button.tsx","components/dump-search-filter.tsx","components/dump-search-results.tsx","components/header/app-bar.tsx","components/header/menu-button.tsx","services/import-export-service.ts","components/floating-button.tsx","hooks/navigation-hook.ts","components/pages/dump-search-page.tsx","validators/string-validators.ts","components/dump-editor.tsx","services/create-service.ts","hooks/shortcut-hooks.ts","hooks/dump-selector-hooks.ts","hooks/editor-hook.ts","components/pages/dump-creator-page.tsx","components/dump-details.tsx","components/pages/dump-details-page.tsx","components/pages/dump-editor-page.tsx","App.tsx","reportWebVitals.ts","index.tsx","global-styles.ts"],"names":["LocalStorageKey","postDumps","dumps","data","JSON","stringify","window","localStorage","setItem","DumpActionType","setDumps","setDumpAction","type","dispatch","getState","removeDump","dump","removeDumpAction","initialState","getItem","parse","error","findAllDumps","store","createStore","combineReducers","state","action","setDumpsAction","addDumpAction","updateDumpAction","index","findIndex","d","id","newState","filter","dumpListAction","dumpAction","applyMiddleware","thunk","useAppSelector","useSelector","createSearchHash","values","Object","keys","map","value","replace","toLowerCase","flatMap","split","length","reduce","set","ActionButton","withTheme","styled","ActionButtonComponent","props","IconButton","className","disabled","onClick","edge","color","ArrowBack","Close","Delete","Edit","Save","selectIcon","DumpSearchFilter","useState","setState","onChange","FormControl","InputLabel","htmlFor","Input","event","target","endAdornment","InputAdornment","position","Search","autoFocus","autoComplete","defaultProps","DumpSearchResults","listItems","ListItem","button","onDumpSelection","ListItemText","primary","summary","secondary","Date","timestamp","toLocaleString","ListItemSecondaryAction","onDumpRemoval","List","AppBar","Toolbar","primaryButton","Typography","variant","title","secondaryButton","MenuButton","anchor","setAnchor","onMenuClose","menuItems","actions","menuAction","MenuItem","onAction","currentTarget","Menu","anchorEl","keepMounted","open","onClose","theme","spacing","importState","file","a","Promise","resolve","_importDumps","reader","FileReader","onload","fileData","ArrayBuffer","TextDecoder","decode","_decodeData","result","jsonData","readAsText","FloatingButton","FloatingButtonComponent","Fab","Add","useNavigation","history","useHistory","navigateTo","route","location","pathname","push","navigateHome","navigateToDetails","navigateToCreate","navigateToEdit","DumpSearchPage","navigation","selected","globalState","scores","searchableDump","description","tags","searchableFilter","content","keywords","searchableContent","join","kw","includes","scoreSearchResult","scoreDump","maxScore","Math","max","score","filterDumps","useDispatch","inputFile","useRef","onFileChoice","files","menuActions","blob","Blob","url","URL","createObjectURL","link","document","createElement","download","href","click","exportState","current","ref","accept","style","display","Container","maxWidth","prevState","isEmpty","trim","DumpEditor","hasError","onFieldChange","field","useEffect","uuid4","now","createDump","noValidate","onSubmit","preventDefault","TextField","label","helperText","multiline","useCancelShortcut","callback","useKeyListener","key","useSaveShortcut","ctrlKey","matches","onKeyDown","addEventListener","removeEventListener","useDumpByIdSelector","dumpId","find","useEditorState","selectedDump","changedDump","saveDisabled","editorState","setEditorState","validate","oldDump","newDump","validSummary","validDescription","summaryChanged","descriptionChanged","DumpCreatorPage","onDumpChange","onSave","addDump","DumpDetails","DumpDetailsPage","routeParams","useDumpParam","onEdit","DumpEditorPage","updateDump","App","basename","process","path","useParams","element","onPerfEntry","GlobalStyle","createGlobalStyle","ReactDOM","render","CssBaseline","StylesProvider","injectFirst","getElementById","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.da913227.chunk.js","sourcesContent":["import { Dump } from '../types/dump-types'\n\nconst LocalStorageKey = {\n  DUMPS: 'dumps',\n}\n\nexport function findAllDumps(): Dump[] {\n  const data: string | null = window.localStorage.getItem(LocalStorageKey.DUMPS)\n  if (data === null) {\n    return []\n  }\n\n  try {\n    const jsonData = JSON.parse(data)\n    return jsonData.dumps\n  } catch (error) {\n    return []\n  }\n}\n\nexport function postDumps(dumps: Dump[]): void {\n  const data = JSON.stringify(dumps)\n  window.localStorage.setItem(LocalStorageKey.DUMPS, data)\n}\n","import { Action, Dispatch } from '@reduxjs/toolkit'\nimport { Dump } from '../types/dump-types'\nimport { findAllDumps, postDumps } from '../services/dump-service'\n\nexport type GetState<T> = () => T\n\ninterface DumpListAction extends Action {\n  type: string\n  dumps: Dump[]\n}\n\ninterface DumpAction extends Action {\n  type: string\n  dump: Dump\n}\n\nconst DumpActionType = {\n  SET_DUMPS: 'SET_DUMPS',\n  ADD_DUMP: 'ADD_DUMP',\n  UPDATE_DUMP: 'UPDATE_DUMP',\n  REMOVE_DUMP: 'REMOVE_DUMP',\n}\n\nexport function setDumps(dumps: Dump[]): any {\n  const setDumpAction: DumpListAction = {\n    type: DumpActionType.SET_DUMPS,\n    dumps: dumps,\n  }\n\n  return (dispatch: Dispatch<Action>, getState: GetState<Dump[]>): void => {\n    dispatch(setDumpAction)\n    const newState: Dump[] = getState()\n    postDumps(newState)\n  }\n}\n\nexport function addDump(dump: Dump): any {\n  const addDumpAction: DumpAction = {\n    type: DumpActionType.ADD_DUMP,\n    dump: dump,\n  }\n\n  return (dispatch: Dispatch<Action>, getState: GetState<Dump[]>): void => {\n    dispatch(addDumpAction)\n    const newState: Dump[] = getState()\n    postDumps(newState)\n  }\n}\n\nexport function updateDump(dump: Dump): any {\n  const setDumpAction: DumpAction = {\n    type: DumpActionType.UPDATE_DUMP,\n    dump: dump,\n  }\n\n  return (dispatch: Dispatch<DumpAction>, getState: GetState<Dump[]>): void => {\n    dispatch(setDumpAction)\n    const newState: Dump[] = getState()\n    postDumps(newState)\n  }\n}\n\nexport function removeDump(dump: Dump): any {\n  const removeDumpAction: DumpAction = {\n    type: DumpActionType.REMOVE_DUMP,\n    dump: dump,\n  }\n\n  return (dispatch: Dispatch<DumpAction>, getState: GetState<Dump[]>): void => {\n    dispatch(removeDumpAction)\n    const newState: Dump[] = getState()\n    postDumps(newState)\n  }\n}\n\nconst initialState = findAllDumps()\n\nexport function dumpReducer(state: Dump[] = initialState, action: Action): Dump[] {\n  function setDumpsAction(dumps: Dump[]): Dump[] {\n    return [...dumps]\n  }\n\n  function addDumpAction(state: Dump[], dump: Dump): Dump[] {\n    return [...state, dump]\n  }\n\n  function updateDumpAction(state: Dump[], dump: Dump): Dump[] {\n    const index = state.findIndex((d: Dump) => d.id === dump.id)\n    if (index < 0) {\n      return state\n    }\n\n    const newState = [...state]\n    newState[index] = dump\n    return newState\n  }\n\n  function removeDumpAction(state: Dump[], dump: Dump): Dump[] {\n    return state.filter((d: Dump) => d.id !== dump.id)\n  }\n\n  switch (action.type) {\n    case DumpActionType.SET_DUMPS: {\n      const dumpListAction = action as DumpListAction\n      return setDumpsAction(dumpListAction.dumps)\n    }\n    case DumpActionType.ADD_DUMP: {\n      const dumpAction = action as DumpAction\n      return addDumpAction(state, dumpAction.dump)\n    }\n    case DumpActionType.UPDATE_DUMP: {\n      const dumpAction = action as DumpAction\n      return updateDumpAction(state, dumpAction.dump)\n    }\n    case DumpActionType.REMOVE_DUMP:\n      const dumpAction = action as DumpAction\n      return removeDumpAction(state, dumpAction.dump)\n  }\n  return state\n}\n","import { applyMiddleware, combineReducers, createStore } from '@reduxjs/toolkit'\nimport thunk from 'redux-thunk'\nimport { dumpReducer } from './dump-store'\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\n\nexport const store = createStore(\n  combineReducers({\n    dumps: dumpReducer,\n  }),\n  applyMiddleware(thunk)\n)\n\nexport type RootState = ReturnType<typeof store.getState>\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n\nexport type AppDispatch = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\n","export type SearchHash = string[]\n\nexport function createSearchHash(...values: string[]): SearchHash {\n  type StringSet = { [value: string]: boolean }\n\n  return Object.keys(\n    values\n      .map((value: string) => value.replace(\"'\", ''))\n      .map((value: string) => value.toLowerCase())\n      .flatMap((value: string) => value.split(/[^a-z0-9]/))\n      .filter((value: string) => value.length > 0)\n      .reduce((set: StringSet, value: string) => {\n        set[value] = true\n        return set\n      }, {})\n  )\n}\n\nexport function scoreSearchResult(content: SearchHash, keywords: SearchHash): number {\n  const searchableContent = content.join(';')\n  return keywords.filter((kw: string) => searchableContent.includes(kw)).length\n}\n","import { ArrowBack, Close, Delete, Edit, Save } from '@material-ui/icons'\nimport { IconButton, withTheme } from '@material-ui/core'\nimport React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nexport const ActionButton = withTheme(styled(ActionButtonComponent)``)\n\ninterface ActionButtonProps {\n  className: string\n  action: 'back' | 'cancel' | 'delete' | 'edit' | 'save'\n  disabled: boolean\n  onClick: () => void\n  edge: 'start' | 'end'\n}\n\nconst propTypes = {\n  className: PropTypes.string.isRequired,\n  action: PropTypes.oneOf(['back', 'cancel', 'delete', 'edit', 'save']).isRequired,\n  disabled: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired,\n  edge: PropTypes.oneOf(['start', 'end']).isRequired,\n}\n\nfunction ActionButtonComponent(props: ActionButtonProps): JSX.Element {\n  function selectIcon(): JSX.Element | null {\n    switch (props.action) {\n      case 'back':\n        return <ArrowBack />\n      case 'cancel':\n        return <Close />\n      case 'delete':\n        return <Delete />\n      case 'edit':\n        return <Edit />\n      case 'save':\n        return <Save />\n      default:\n        return null\n    }\n  }\n\n  return (\n    <IconButton\n      className={props.className}\n      disabled={props.disabled}\n      onClick={props.onClick}\n      edge={props.edge}\n      color=\"inherit\"\n      aria-label={props.action}\n    >\n      {selectIcon()}\n    </IconButton>\n  )\n}\n\nActionButtonComponent.propTypes = propTypes\n\nActionButtonComponent.defaultProps = {\n  disabled: false,\n  onClick: () => {},\n}\n","import { FormControl, Input, InputAdornment, InputLabel } from '@material-ui/core'\nimport React, { ChangeEvent, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { Search as SearchIcon } from '@material-ui/icons'\nimport { ActionButton } from './header/action-button'\n\ninterface DumpSearchFilterProps {\n  onChange: (filter: string) => void\n}\n\nconst propTypes = {\n  onChange: PropTypes.func.isRequired,\n}\n\nexport function DumpSearchFilter(props: DumpSearchFilterProps): JSX.Element {\n  const [state, setState]: [string, React.Dispatch<string>] = useState('')\n\n  function onChange(filter: string): void {\n    props.onChange(filter)\n    setState(filter)\n  }\n\n  function selectAction(): JSX.Element {\n    if (state === '') {\n      return <SearchIcon />\n    } else {\n      return <ActionButton action={'cancel'} onClick={() => onChange('')} edge={'end'} />\n    }\n  }\n\n  return (\n    <FormControl>\n      <InputLabel htmlFor=\"search\">Search</InputLabel>\n      <Input\n        id=\"search\"\n        value={state}\n        onChange={(event: ChangeEvent<HTMLInputElement>) => onChange(event.target.value)}\n        endAdornment={<InputAdornment position=\"end\">{selectAction()}</InputAdornment>}\n        autoFocus\n        autoComplete=\"off\"\n      />\n    </FormControl>\n  )\n}\n\nDumpSearchFilter.propTypes = propTypes\n","import { IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, withTheme } from '@material-ui/core'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { Delete as DeleteIcon } from '@material-ui/icons'\nimport { Dump, dumpShape } from '../types/dump-types'\nimport PropTypes from 'prop-types'\n\nexport const DumpSearchResults = withTheme(styled(DumpSearchComponent)``)\n\ninterface SearchProps {\n  dumps: Dump[]\n  onDumpSelection: (dump: Dump) => void\n  onDumpRemoval: (dump: Dump) => void\n}\n\nconst propTypes = {\n  dumps: PropTypes.arrayOf(PropTypes.shape(dumpShape).isRequired).isRequired,\n  onDumpSelection: PropTypes.func.isRequired,\n  onDumpRemoval: PropTypes.func.isRequired,\n}\n\nfunction DumpSearchComponent(props: SearchProps) {\n  const listItems = props.dumps.map((dump: Dump) => (\n    <ListItem key={dump.id} button onClick={() => props.onDumpSelection(dump)}>\n      <ListItemText primary={dump.summary} secondary={new Date(dump.timestamp).toLocaleString()} />\n      <ListItemSecondaryAction onClick={() => props.onDumpRemoval(dump)}>\n        <IconButton edge=\"end\" aria-label=\"delete\">\n          <DeleteIcon />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  ))\n\n  return <>{props.dumps.length > 0 && <List>{listItems}</List>}</>\n}\n\nDumpSearchComponent.propTypes = propTypes\n","import { AppBar as ReactAppBar, Toolbar, Typography, withTheme } from '@material-ui/core'\nimport styled from 'styled-components'\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AppBar = withTheme(styled(AppBarComponent)`\n  flex-grow: 1;\n\n  & > div > h6 {\n    flex-grow: 1;\n  }\n`)\n\ninterface AppBarProps {\n  className: string\n  title: string\n  primaryButton: JSX.Element | null\n  secondaryButton: JSX.Element | null\n}\n\nconst propTypes = {\n  className: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  primaryButton: PropTypes.node,\n  secondaryButton: PropTypes.node,\n}\n\nfunction AppBarComponent(props: AppBarProps): JSX.Element {\n  return (\n    <ReactAppBar className={props.className} position=\"sticky\">\n      <Toolbar>\n        {props.primaryButton}\n        <Typography variant=\"h6\">{props.title}</Typography>\n        {props.secondaryButton}\n      </Toolbar>\n    </ReactAppBar>\n  )\n}\n\nAppBarComponent.propTypes = propTypes\n","import { IconButton, Menu, MenuItem, Theme, withTheme } from '@material-ui/core'\nimport { Menu as MenuIcon } from '@material-ui/icons'\nimport React, { MouseEvent, useState } from 'react'\nimport { MenuAction, menuActionShape } from '../../types/menu-action-types'\nimport styled, { ThemeProps } from 'styled-components'\nimport PropTypes from 'prop-types'\n\nexport const MenuButton = withTheme(styled(MenuButtonComponent)`\n  button {\n    margin-right: ${(props: ThemeProps<Theme>) => props.theme.spacing(2)};\n  }\n`)\n\ninterface MenuButtonProps {\n  className: string\n  actions: MenuAction[]\n}\n\nconst propTypes = {\n  className: PropTypes.string.isRequired,\n  actions: PropTypes.arrayOf(PropTypes.shape(menuActionShape).isRequired).isRequired,\n}\n\nfunction MenuButtonComponent(props: MenuButtonProps) {\n  const [anchor, setAnchor] = useState<HTMLElement | null>(null)\n\n  const onMenuOpen = (event: MouseEvent<HTMLButtonElement>) => {\n    setAnchor(event.currentTarget)\n  }\n\n  const onMenuClose = () => {\n    setAnchor(null)\n  }\n\n  const onAction = (action: () => void) => {\n    action()\n    onMenuClose()\n  }\n\n  const menuItems = props.actions.map((menuAction: MenuAction, index: number) => (\n    <MenuItem key={`menu-item-${index}`} onClick={() => onAction(menuAction.action)}>\n      {menuAction.title}\n    </MenuItem>\n  ))\n\n  return (\n    <div className={props.className}>\n      <IconButton onClick={onMenuOpen} edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n        <MenuIcon />\n      </IconButton>\n\n      {menuItems.length > 0 && (\n        <Menu id=\"app-menu\" anchorEl={anchor} keepMounted open={!!anchor} onClose={onMenuClose}>\n          {menuItems}\n        </Menu>\n      )}\n    </div>\n  )\n}\n\nMenuButtonComponent.propTypes = propTypes\n","import { RootState } from '../store/store'\n\nexport async function importState(file: File): Promise<RootState> {\n  return new Promise<RootState>((resolve) => _importDumps(file, resolve))\n}\n\nfunction _importDumps(file: File, resolve: (result: RootState) => void): void {\n  const reader = new FileReader()\n  reader.onload = () => {\n    const fileData: string = _decodeData(reader.result)\n    const jsonData: any = JSON.parse(fileData)\n    resolve(jsonData)\n  }\n\n  reader.readAsText(file)\n}\n\nfunction _decodeData(data: string | ArrayBuffer | null): string {\n  if (data === null) {\n    return ''\n  }\n  if (data instanceof ArrayBuffer) {\n    return new TextDecoder().decode(data)\n  }\n  return data\n}\n\nexport function exportState(state: RootState): void {\n  const jsonData: string = JSON.stringify(state)\n  const blob = new Blob([jsonData], { type: 'application/json' })\n  const url = URL.createObjectURL(blob)\n  const link = document.createElement('a')\n  link.download = 'braindump.json'\n  link.href = url\n  link.click()\n}\n","import { Fab, Theme, withTheme } from '@material-ui/core'\nimport { Add as AddIcon } from '@material-ui/icons'\nimport React from 'react'\nimport styled, { ThemeProps } from 'styled-components'\nimport PropTypes from 'prop-types'\n\nexport const FloatingButton = withTheme(styled(FloatingButtonComponent)`\n  position: fixed;\n  top: auto;\n  bottom: ${(props: FloatingButtonProps & ThemeProps<Theme>) => 30 + (props.index || 0) * 70}px;\n  left: auto;\n  right: 30px;\n`)\n\ninterface FloatingButtonProps {\n  className: string\n  index?: number\n  onClick: () => void\n}\n\nconst propTypes = {\n  className: PropTypes.string.isRequired,\n  index: PropTypes.number,\n  onClick: PropTypes.func.isRequired,\n}\n\nfunction FloatingButtonComponent(props: FloatingButtonProps) {\n  return (\n    <Fab className={props.className} color=\"primary\" aria-label=\"add\" onClick={props.onClick}>\n      <AddIcon />\n    </Fab>\n  )\n}\n\nFloatingButtonComponent.propTypes = propTypes\n\nFloatingButtonComponent.defaultProps = {\n  onClick: () => {},\n}\n","import { useHistory } from 'react-router-dom'\nimport { Dump } from '../types/dump-types'\n\nexport interface DumpRouteParam {\n  dumpId: string\n}\n\nexport interface Navigation {\n  navigateHome: () => void\n  navigateToDetails: (dump: Dump) => void\n  navigateToEdit: (dump: Dump) => void\n  navigateToCreate: () => void\n}\n\nexport function useNavigation(): Navigation {\n  const history = useHistory<string>()\n\n  function navigateHome(): void {\n    navigateTo('/')\n  }\n\n  function navigateToDetails(dump: Dump): void {\n    history.push(`/show/dumps/${dump.id}`)\n  }\n\n  function navigateToCreate(): void {\n    navigateTo('/create')\n  }\n\n  function navigateToEdit(dump: Dump): void {\n    navigateTo(`/edit/dumps/${dump.id}`)\n  }\n\n  function navigateTo(route: string): void {\n    const isHome = history.location.pathname === '/'\n    if (isHome) {\n      history.push(route)\n    } else {\n      history.replace(route)\n    }\n  }\n\n  return {\n    navigateHome,\n    navigateToDetails,\n    navigateToCreate,\n    navigateToEdit,\n  }\n}\n","import React, { ChangeEvent, useRef, useState } from 'react'\nimport { RootState, store, useAppSelector } from '../../store/store'\nimport { removeDump, setDumps } from '../../store/dump-store'\nimport { createSearchHash, scoreSearchResult } from '../../services/search-service'\nimport { DumpSearchFilter } from '../dump-search-filter'\nimport { DumpSearchResults } from '../dump-search-results'\nimport { useDispatch } from 'react-redux'\nimport { Dump } from '../../types/dump-types'\nimport { AppBar } from '../header/app-bar'\nimport { MenuButton } from '../header/menu-button'\nimport { exportState, importState } from '../../services/import-export-service'\nimport { MenuAction } from '../../types/menu-action-types'\nimport { FloatingButton } from '../floating-button'\nimport { Container } from '@material-ui/core'\nimport { Navigation, useNavigation } from '../../hooks/navigation-hook'\nimport PropTypes from 'prop-types'\n\ninterface DumpSearchPageProps {\n  useNavigation: () => Navigation\n}\n\nconst propTypes = {\n  useNavigation: PropTypes.func.isRequired,\n}\n\ninterface SearchState {\n  filter: string\n  selected: Dump | null\n}\n\ntype SetSearchState = React.Dispatch<React.SetStateAction<SearchState>>\n\nexport function DumpSearchPage(props: DumpSearchPageProps) {\n  const navigation = props.useNavigation()\n\n  const initialState: SearchState = {\n    filter: '',\n    selected: null,\n  }\n\n  const [state, setState]: [SearchState, SetSearchState] = useState(initialState)\n\n  const dumps = useAppSelector((globalState: RootState): Dump[] => {\n    const scores = globalState.dumps.map((dump: Dump) => scoreDump(dump, state.filter))\n    return filterDumps(globalState.dumps, scores)\n  })\n\n  const dispatch = useDispatch<any>()\n\n  const exportAction = () => {\n    const state: RootState = store.getState()\n    exportState(state)\n  }\n\n  const inputFile = useRef<HTMLInputElement | null>(null)\n\n  const importAction = () => {\n    inputFile.current?.click()\n  }\n\n  const onFileChoice = async (event: ChangeEvent<HTMLInputElement>) => {\n    const file: File | null = event.target.files?.[0] || null\n    if (file !== null) {\n      const state: RootState = await importState(file)\n      dispatch(setDumps(state.dumps))\n    }\n  }\n\n  const menuActions: MenuAction[] = [\n    { title: 'Export', action: exportAction },\n    { title: 'Import', action: importAction },\n  ]\n\n  const onSearchFilterChange = (filter: string) => {\n    setState((prevState) => ({ ...prevState, filter }))\n  }\n\n  const onDumpRemoval = (dump: Dump) => {\n    dispatch(removeDump(dump))\n  }\n\n  return (\n    <>\n      <AppBar title=\"Braindump\" primaryButton={<MenuButton actions={menuActions} />} />\n\n      <input\n        type=\"file\"\n        ref={inputFile}\n        accept={'application/json, .json'}\n        onChange={onFileChoice}\n        style={{ display: 'none' }}\n      />\n\n      <Container maxWidth={false}>\n        <h1>Find dumps</h1>\n        <DumpSearchFilter onChange={onSearchFilterChange} />\n        <DumpSearchResults dumps={dumps} onDumpSelection={navigation.navigateToDetails} onDumpRemoval={onDumpRemoval} />\n        <FloatingButton onClick={navigation.navigateToCreate} />\n      </Container>\n    </>\n  )\n}\n\nDumpSearchPage.propTypes = propTypes\n\nDumpSearchPage.defaultProps = {\n  useNavigation,\n}\n\nfunction scoreDump(dump: Dump, filter: string): number {\n  const searchableDump = createSearchHash(dump.summary, dump.description, ...dump.tags)\n  const searchableFilter = createSearchHash(filter)\n  return scoreSearchResult(searchableDump, searchableFilter)\n}\n\nfunction filterDumps(dumps: Dump[], scores: number[]): Dump[] {\n  const maxScore = Math.max(...scores)\n  if (maxScore === 0) {\n    return []\n  }\n\n  const maxIndexes = scores\n    .map((score: number, index: number) => (score === maxScore ? index : -1))\n    .filter((index: number) => index >= 0)\n  return maxIndexes.map((index: number) => dumps[index])\n}\n","export function isEmpty(value: string): boolean {\n  return value.trim().length === 0\n}\n","import { TextField, Theme, withTheme } from '@material-ui/core'\nimport styled, { ThemeProps } from 'styled-components'\nimport React, { ChangeEvent, FormEvent, useEffect, useState } from 'react'\nimport { isEmpty } from '../validators/string-validators'\nimport { Dump, dumpShape } from '../types/dump-types'\nimport PropTypes from 'prop-types'\nimport { createDump } from '../services/create-service'\n\nexport const DumpEditor = withTheme(styled(DumpEditorComponent)`\n  div {\n    width: 100%;\n  }\n\n  > div {\n    margin: ${(props: ThemeProps<Theme>) => props.theme.spacing(2, 0, 2)};\n  }\n\n  > div > div > div > TextArea {\n    font-family: monospace;\n  }\n`)\n\ninterface DumpEditorProps {\n  className: string\n  dump?: Dump\n  onChange: (dump: Dump) => void\n}\n\nconst propTypes = {\n  className: PropTypes.string.isRequired,\n  dump: PropTypes.shape(dumpShape),\n  onChange: PropTypes.func.isRequired,\n}\n\ninterface DumpFieldState {\n  value: string | null\n  hasError: boolean\n  error: string | null\n}\n\ninterface EditorState {\n  summary: DumpFieldState\n  description: DumpFieldState\n}\n\ntype SetEditorState = React.Dispatch<React.SetStateAction<EditorState>>\n\nfunction DumpEditorComponent(props: DumpEditorProps) {\n  const initialState: EditorState = {\n    summary: {\n      value: props.dump?.summary || null,\n      hasError: false,\n      error: null,\n    },\n    description: {\n      value: props.dump?.description || null,\n      hasError: false,\n      error: null,\n    },\n  }\n\n  const [state, setState]: [EditorState, SetEditorState] = useState(initialState)\n\n  useEffect(() => {\n    const id = props.dump?.id || null\n    const summary = state.summary.value || ''\n    const description = state.description.value || ''\n    props.onChange(createDump(id, summary, description))\n  }, [state])\n\n  function onFieldChange(field: keyof EditorState, value: string): void {\n    const hasError = isEmpty(value)\n    const error = hasError ? 'Field must not be empty' : null\n    setState((prevState: EditorState) => ({\n      ...prevState,\n      [field]: { value, hasError, error },\n    }))\n  }\n\n  function onSubmit(event: FormEvent<HTMLFormElement>): void {\n    event.preventDefault()\n  }\n\n  return (\n    <form className={props.className} noValidate autoComplete=\"off\" onSubmit={onSubmit}>\n      <div>\n        <TextField\n          id=\"summary\"\n          label=\"Summary\"\n          variant=\"outlined\"\n          value={state.summary.value || ''}\n          autoFocus\n          onChange={(event: ChangeEvent<HTMLInputElement>) => onFieldChange('summary', event.target.value)}\n          error={state.summary.hasError}\n          helperText={state.summary.error}\n        />\n      </div>\n      <div>\n        <TextField\n          id=\"description\"\n          label=\"Description\"\n          variant=\"outlined\"\n          value={state.description.value || ''}\n          multiline\n          onChange={(event: ChangeEvent<HTMLInputElement>) => onFieldChange('description', event.target.value)}\n          error={state.description.hasError}\n          helperText={state.description.error}\n        />\n      </div>\n    </form>\n  )\n}\n\nDumpEditorComponent.propTypes = propTypes\n","import { v4 as uuid4 } from 'uuid'\nimport { Dump } from '../types/dump-types'\n\nexport function createDump(id: string | null, summary: string, description: string): Dump {\n  return {\n    id: id || uuid4(),\n    timestamp: Date.now(),\n    summary: summary.trim(),\n    description: description,\n    tags: [],\n  }\n}\n","import { useEffect } from 'react'\n\nexport function useEditShortcut(callback: () => void): void {\n  useKeyListener(isEditEvent, callback)\n\n  function isEditEvent(event: KeyboardEvent): boolean {\n    return event.key === 'e'\n  }\n}\n\nexport function useCancelShortcut(callback: () => void): void {\n  useKeyListener(isCancelEvent, callback)\n\n  function isCancelEvent(event: KeyboardEvent): boolean {\n    return event.key === 'Escape'\n  }\n}\n\nexport function useSaveShortcut(callback: () => void): void {\n  useKeyListener(isSaveEvent, callback)\n\n  function isSaveEvent(event: KeyboardEvent): boolean {\n    return event.ctrlKey && event.key === 's'\n  }\n}\n\nfunction useKeyListener(matches: (event: KeyboardEvent) => boolean, callback: () => void): void {\n  useEffect(() => {\n    document.addEventListener('keydown', onKeyDown)\n    return () => {\n      document.removeEventListener('keydown', onKeyDown)\n    }\n  })\n\n  function onKeyDown(event: KeyboardEvent): void {\n    if (matches(event)) {\n      callback()\n      event.preventDefault()\n    }\n  }\n}\n","import { Dump } from '../types/dump-types'\nimport { RootState, useAppSelector } from '../store/store'\n\nexport function useDumpByIdSelector(dumpId?: string): Dump | null {\n  return useAppSelector((state: RootState) => state.dumps.find((dump: Dump) => dump.id === dumpId) || null)\n}\n","import { Dump } from '../types/dump-types'\nimport { useEffect, useState } from 'react'\nimport { isEmpty } from '../validators/string-validators'\nimport { useDumpByIdSelector } from './dump-selector-hooks'\n\nexport interface EditorState {\n  selectedDump: Dump | null\n  changedDump: Dump | null\n  saveDisabled: boolean\n}\n\nexport type EditorAction = (dump: Dump) => void\n\nexport function useEditorState(dumpId?: string): [EditorState, EditorAction] {\n  const selectedDump: Dump | null = useDumpByIdSelector(dumpId)\n\n  const [editorState, setEditorState] = useState<EditorState>({\n    selectedDump,\n    changedDump: selectedDump,\n    saveDisabled: true,\n  })\n\n  useEffect(() => {\n    setEditorState({ selectedDump, changedDump: selectedDump, saveDisabled: true })\n  }, [selectedDump])\n\n  function onDumpChange(dump: Dump): void {\n    setEditorState((prevState: EditorState) => ({\n      ...prevState,\n      changedDump: dump,\n      saveDisabled: !validate(prevState.selectedDump, dump),\n    }))\n  }\n\n  function validate(oldDump: Dump | null, newDump: Dump): boolean {\n    const validSummary = !isEmpty(newDump.summary)\n    const validDescription = !isEmpty(newDump.description)\n    const summaryChanged = newDump.summary.trim() !== oldDump?.summary\n    const descriptionChanged = newDump.description !== oldDump?.description\n    return validSummary && validDescription && (summaryChanged || descriptionChanged)\n  }\n\n  return [editorState, onDumpChange]\n}\n","import { DumpEditor } from '../dump-editor'\nimport { addDump } from '../../store/dump-store'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { Container } from '@material-ui/core'\nimport { AppBar } from '../header/app-bar'\nimport { Navigation, useNavigation } from '../../hooks/navigation-hook'\nimport { useCancelShortcut, useSaveShortcut } from '../../hooks/shortcut-hooks'\nimport { EditorAction, EditorState, useEditorState } from '../../hooks/editor-hook'\nimport { useDispatch } from 'react-redux'\nimport { ActionButton } from '../header/action-button'\n\ninterface DumpCreatorPageProps {\n  useNavigation: () => Navigation\n  useEditorState: (dumpId?: string) => [EditorState, EditorAction]\n  useDispatch: () => any\n}\n\nconst propTypes = {\n  useNavigation: PropTypes.func.isRequired,\n  useEditorState: PropTypes.func.isRequired,\n  useDispatch: PropTypes.func.isRequired,\n}\n\nexport function DumpCreatorPage(props: DumpCreatorPageProps) {\n  const navigation = props.useNavigation()\n  const [editorState, onDumpChange] = props.useEditorState()\n  const dispatch = props.useDispatch()\n\n  useCancelShortcut(navigation.navigateHome)\n  useSaveShortcut(onSave)\n\n  function onSave(): void {\n    if (!editorState.saveDisabled && editorState.changedDump !== null) {\n      dispatch(addDump(editorState.changedDump))\n      navigation.navigateToEdit(editorState.changedDump)\n    }\n  }\n\n  return (\n    <>\n      <AppBar\n        title=\"Braindump\"\n        primaryButton={<ActionButton action=\"cancel\" onClick={navigation.navigateHome} edge=\"start\" />}\n        secondaryButton={<ActionButton action=\"save\" disabled={editorState.saveDisabled} onClick={onSave} edge=\"end\" />}\n      />\n\n      <Container maxWidth={false}>\n        <h1>Create new dump</h1>\n        <DumpEditor dump={editorState.selectedDump} onChange={onDumpChange} />\n      </Container>\n    </>\n  )\n}\n\nDumpCreatorPage.propTypes = propTypes\n\nDumpCreatorPage.defaultProps = {\n  useNavigation,\n  useEditorState,\n  useDispatch: () => useDispatch<any>(),\n}\n","import { withTheme } from '@material-ui/core'\nimport styled from 'styled-components'\nimport React from 'react'\nimport Markdown from 'react-markdown'\nimport { Dump, dumpShape } from '../types/dump-types'\nimport PropTypes from 'prop-types'\n\nexport const DumpDetails = withTheme(styled(DumpDetailsComponent)`\n  > div:last-child {\n    text-align: right;\n  }\n`)\n\ninterface DumpDetailsProps {\n  className: string\n  dump: Dump\n}\n\nconst propTypes = {\n  className: PropTypes.string.isRequired,\n  dump: PropTypes.shape(dumpShape).isRequired,\n}\n\nfunction DumpDetailsComponent(props: DumpDetailsProps) {\n  return (\n    <div className={props.className}>\n      <h1>{props.dump.summary}</h1>\n      <Markdown>{props.dump.description}</Markdown>\n    </div>\n  )\n}\n\nDumpDetailsComponent.propTypes = propTypes\n","import { useParams } from 'react-router-dom'\nimport { DumpDetails } from '../dump-details'\nimport { Dump } from '../../types/dump-types'\nimport PropTypes from 'prop-types'\nimport { AppBar } from '../header/app-bar'\nimport React from 'react'\nimport { Container } from '@material-ui/core'\nimport { FloatingButton } from '../floating-button'\nimport { DumpRouteParam, Navigation, useNavigation } from '../../hooks/navigation-hook'\nimport { useCancelShortcut, useEditShortcut } from '../../hooks/shortcut-hooks'\nimport { useDumpByIdSelector } from '../../hooks/dump-selector-hooks'\nimport { ActionButton } from '../header/action-button'\nimport { useDispatch } from 'react-redux'\nimport { removeDump } from '../../store/dump-store'\n\ninterface ShowDumpViewProps {\n  useDumpParam: () => DumpRouteParam\n  useNavigation: () => Navigation\n  useDumpByIdSelector: (dumpId?: string) => Dump | null\n  useDispatch: () => any\n}\n\nconst propTypes = {\n  useDumpParam: PropTypes.func.isRequired,\n  useNavigation: PropTypes.func.isRequired,\n  useDumpByIdSelector: PropTypes.func.isRequired,\n  useDispatch: PropTypes.func.isRequired,\n}\n\nexport function DumpDetailsPage(props: ShowDumpViewProps) {\n  const routeParams = props.useDumpParam()\n  const navigation = props.useNavigation()\n  const dump = props.useDumpByIdSelector(routeParams.dumpId)\n  const dispatch = props.useDispatch()\n\n  useCancelShortcut(navigation.navigateHome)\n  useEditShortcut(onEdit)\n\n  function onEdit(): void {\n    if (dump !== null) {\n      navigation.navigateToEdit(dump)\n    }\n  }\n\n  function onDelete(): void {\n    if (dump !== null) {\n      dispatch(removeDump(dump))\n      navigation.navigateHome()\n    }\n  }\n\n  return (\n    <>\n      <AppBar\n        title=\"Braindump\"\n        primaryButton={<ActionButton action=\"back\" onClick={navigation.navigateHome} edge=\"start\" />}\n        secondaryButton={\n          <>\n            <ActionButton action=\"edit\" disabled={dump === null} onClick={onEdit} edge=\"end\" />\n            <ActionButton action=\"delete\" disabled={dump === null} onClick={onDelete} edge=\"end\" />\n          </>\n        }\n      />\n\n      <Container maxWidth={false}>\n        {dump !== null && <DumpDetails dump={dump} />}\n        <FloatingButton onClick={navigation.navigateToCreate} />\n      </Container>\n    </>\n  )\n}\n\nDumpDetailsPage.propTypes = propTypes\n\nDumpDetailsPage.defaultProps = {\n  useDumpParam: () => useParams<DumpRouteParam>(),\n  useNavigation,\n  useDumpByIdSelector,\n  useDispatch: () => useDispatch<any>(),\n}\n","import { DumpEditor } from '../dump-editor'\nimport { useParams } from 'react-router-dom'\nimport { updateDump } from '../../store/dump-store'\nimport { useDispatch } from 'react-redux'\nimport { FloatingButton } from '../floating-button'\nimport React from 'react'\nimport { Container } from '@material-ui/core'\nimport { AppBar } from '../header/app-bar'\nimport PropTypes from 'prop-types'\nimport { DumpRouteParam, Navigation, useNavigation } from '../../hooks/navigation-hook'\nimport { useCancelShortcut, useSaveShortcut } from '../../hooks/shortcut-hooks'\nimport { EditorAction, EditorState, useEditorState } from '../../hooks/editor-hook'\nimport { ActionButton } from '../header/action-button'\n\ninterface DumpEditorPageProps {\n  useDumpParam: () => DumpRouteParam\n  useNavigation: () => Navigation\n  useEditorState: (dumpId: string) => [EditorState, EditorAction]\n  useDispatch: () => any\n}\n\nconst propTypes = {\n  useDumpParam: PropTypes.func.isRequired,\n  useNavigation: PropTypes.func.isRequired,\n  useEditorState: PropTypes.func.isRequired,\n  useDispatch: PropTypes.func.isRequired,\n}\n\nexport function DumpEditorPage(props: DumpEditorPageProps) {\n  const routeParams = props.useDumpParam()\n  const navigation = props.useNavigation()\n  const [editorState, onDumpChange] = props.useEditorState(routeParams.dumpId)\n  const dispatch = props.useDispatch()\n\n  useCancelShortcut(navigation.navigateHome)\n  useSaveShortcut(onSave)\n\n  function onSave(): void {\n    if (!editorState.saveDisabled && editorState.changedDump !== null) {\n      dispatch(updateDump(editorState.changedDump))\n    }\n  }\n\n  return (\n    <>\n      <AppBar\n        title=\"Braindump\"\n        primaryButton={<ActionButton action=\"cancel\" onClick={navigation.navigateHome} edge=\"start\" />}\n        secondaryButton={<ActionButton action=\"save\" disabled={editorState.saveDisabled} onClick={onSave} edge=\"end\" />}\n      />\n\n      <Container maxWidth={false}>\n        <h1>Edit dump</h1>\n        <DumpEditor dump={editorState.selectedDump} onChange={onDumpChange} />\n        <FloatingButton onClick={navigation.navigateToCreate} />\n      </Container>\n    </>\n  )\n}\n\nDumpEditorPage.propTypes = propTypes\n\nDumpEditorPage.defaultProps = {\n  useDumpParam: () => useParams<DumpRouteParam>(),\n  useNavigation,\n  useEditorState,\n  useDispatch: () => useDispatch<any>(),\n}\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { DumpSearchPage } from './components/pages/dump-search-page'\nimport { DumpCreatorPage } from './components/pages/dump-creator-page'\nimport { DumpDetailsPage } from './components/pages/dump-details-page'\nimport { DumpEditorPage } from './components/pages/dump-editor-page'\n\nexport function App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/create\">\n          <DumpCreatorPage />\n        </Route>\n        <Route path=\"/edit/dumps/:dumpId\">\n          <DumpEditorPage />\n        </Route>\n        <Route path=\"/show/dumps/:dumpId\">\n          <DumpDetailsPage />\n        </Route>\n        <Route path=\"/\">\n          <DumpSearchPage />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  )\n}\n","import { ReportHandler } from 'web-vitals'\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n","import React, { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport { reportWebVitals } from './reportWebVitals'\nimport { CssBaseline, StylesProvider } from '@material-ui/core'\nimport { Provider } from 'react-redux'\nimport { store } from './store/store'\nimport { GlobalStyle } from './global-styles'\n\nReactDOM.render(withAppContext(<App />), document.getElementById('root'))\n\nfunction withAppContext(element: JSX.Element): JSX.Element {\n  return (\n    <StrictMode>\n      <CssBaseline />\n      <StylesProvider injectFirst>\n        <GlobalStyle />\n        <Provider store={store}>{element}</Provider>\n      </StylesProvider>\n    </StrictMode>\n  )\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle``\n"],"sourceRoot":""}